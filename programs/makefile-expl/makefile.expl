# External libs
DMRG		= 
ALGS		= 
TOOLS		= 
BOOST       = 
GSL         = 
HDF5		= 
EIGEN		= 
TEXTTABLE	=  # only necessary if intel mkl routines should be used, but a modern opneblas implementation has the same perfomance.
LAPACK		= 
MKLROOT		= 
TERMCOLOR	= 

# General
CC			= g++
LD			= g++
RM			= rm -rf
RMDIR		= rmdir
INSTALL		= install
DEBUG		= -ggdb -O0 -march=native -ftrapv -fopenmp
OPTIMIZE	= -O3 -march=native -m64 -fopenmp
ifeq ($(CC),g++)
	DEBUG    += -fmax-errors=5
	OPTIMIZE += -fmax-errors=5
else
ifeq ($(CC),clang++)
	DEBUG	 += -ferror-limit=5 -Wno-parentheses
	OPTIMIZE += -ferror-limit=5 -Wno-parentheses
endif
endif

## CHANGE THIS ##
TARGET		= <EXE_NAME>
SRCDIR		= .
OBJDIR		= .
BINDIR		= .
## CHANGE THIS ##

# CFLAGS, LDFLAGS, CPPFLAGS, PREFIX can be overriden on CLI
CFLAGS		:= $(DEBUG)
ifdef D
CPPFLAGS	:= -std=c++17 $(DEBUG)
else
CPPFLAGS	:= -std=c++17 $(OPTIMIZE)
endif
ifdef BLAS
CPPFLAGS	+= -DBLAS
endif
INTELFLAGS	:= ${MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a \
			   ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_blacs_openmpi_lp64.a -lgomp -lpthread -lm -ldl
LDFLAGS		:=
ifdef MKL
LDFLAGS		+= $(INTELFLAGS)
endif
PREFIX		:= /home/p1nv755
INC         := -I$(DMRG) -I$(ALGS) -I$(TOOLS) -I$(GSL)/include -I$(BOOST)/include -I$(HDF5)/include -I$(EIGEN) -I$(TEXTTABLE) -I$(TERMCOLOR)
ifdef MKL
INC         += -I${MKLROOT}/include
endif
TARGET_ARCH :=


# Compiler Flags
ALL_CFLAGS		:= $(CFLAGS)
ALL_CFLAGS		+= -Wall -Wextra -pedantic -ansi
ALL_CFLAGS		+= -fno-strict-aliasing
ALL_CFLAGS		+= -Wuninitialized -Winit-self -Wfloat-equal
ALL_CFLAGS		+= -Wundef -Wshadow -Wc++-compat -Wcast-qual -Wcast-align
ALL_CFLAGS		+= -Wconversion -Wsign-conversion -Wjump-misses-init
ALL_CFLAGS		+= -Wno-multichar -Wpacked -Wstrict-overflow -Wvla
ALL_CFLAGS		+= -Wformat -Wno-format-zero-length -Wstrict-prototypes
ALL_CFLAGS		+= -Wno-unknown-warning-option

# Preprocessor Flags
ALL_CPPFLAGS	:= $(CPPFLAGS)

# Linker Flags
ALL_LDFLAGS		:= $(LDFLAGS)
ALL_LDLIBS		:= -lhdf5 -lhdf5_cpp -lc -lgsl -lgslcblas -lboost_program_options -fopenmp
ifdef BLAS
ALL_LDLIBS		+= -lopenblas -llapack
endif

# Source, Binaries, Dependencies
SRC			:= <SOURCE_NAME> #$(shell find $(SRCDIR) -type f -name '*.cc')
OBJ			:= $(patsubst $(SRCDIR)/%,$(OBJDIR)/%,$(SRC:.cc=.o))
DEP			:= $(OBJ:.o=.d)
BIN			:= $(BINDIR)/$(TARGET)
-include $(DEP)


# Verbosity Control, ala automake
V 			= 0

# Verbosity for CC
REAL_CC 	:= $(CC)
CC_0 		= @echo "CC $<"; $(REAL_CC)
CC_1 		= $(REAL_CC)
CC 			= $(CC_$(V))

# Verbosity for LD
REAL_LD 	:= $(LD)
LD_0 		= @echo "LD $@"; $(REAL_LD)
LD_1 		= $(REAL_LD)
LD 			= $(LD_$(V))

# Verbosity for RM
REAL_RM 	:= $(RM)
RM_0 		= @echo "Cleaning..."; $(REAL_RM)
RM_1 		= $(REAL_RM)
RM 			= $(RM_$(V))

# Verbosity for RMDIR
REAL_RMDIR 	:= $(RMDIR)
RMDIR_0 	= @$(REAL_RMDIR)
RMDIR_1 	= $(REAL_RMDIR)
RMDIR 		= $(RMDIR_$(V))



# Build Rules
.PHONY: clean
.DEFAULT_GOAL := all

all: $(BIN) #setup 
setup: dir
remake: clean all

dir:
	@mkdir -p $(OBJDIR)
	@mkdir -p $(BINDIR)


$(BIN): $(OBJ)
	$(LD) $(ALL_LDFLAGS) $^ $(ALL_LDLIBS) -o $@

$(OBJDIR)/%.o: $(SRCDIR)/%.cc
	$(CC) $(ALL_CPPFLAGS) $(INC) -c -MMD -MP -o $@ $<


install: $(BIN)
	$(INSTALL) -d $(PREFIX)/bin
	$(INSTALL) $(BIN) $(PREFIX)/bin

clean:
	$(RM) $(OBJ) $(DEP) $(BIN)
	$(RMDIR) $(OBJDIR) $(BINDIR) 2> /dev/null; true
