	//--------------<KernelPolynomialSolver>---------------
	sort(dE.rbegin(), dE.rend());
	
	double spillage = 0.;
	if (spec == "PES" or spec == "IPES" or spec == "CSF")
	{
		spillage = 4.*dE[0];
	}
	else if ((spec == "AES" and N==2*L*Ly) or (spec == "APS" and N==0)) // full and empty band for AES/APS
	{
		spillage = 8.*dE[0];
	}
	else if (spec == "SSF" or spec == "SSFX" or spec == "SSFY" or spec == "SSFZ" or spec == "SSFP" or spec == "SSFM")
	{
		spillage = 5.*dE[0]; //0.5*(Emax-Emin);
	}
	
	vector<OrthPolyGreen<MODEL,MODEL::StateXd,ArrayXd,CHEBYSHEV> > KPS(i0_list.size());
	for (int ii0=0; ii0<i0_list.size(); ++ii0)
	{
		bool VERBOSE = (i0_list[ii0]==L/2 or i0_list.size()==1)? true:false; // print out the most difficult case i0=L/2
		KPS[ii0] = OrthPolyGreen<MODEL,MODEL::StateXd,ArrayXd,CHEBYSHEV>(Emin-spillage, Emax+spillage, VERBOSE);
	}
	
	if (CHEB)
	{
		lout << "spillage=" << spillage << endl;
		
		for (size_t i=0; i<dE.size(); ++i)
		{
			int Mval = (Emax-Emin+2.*spillage)/dE[i];
			if (USE_IDENTITIES and Mval%2==1) Mval += 1;
			Msave.push_back(Mval);
			lout << "dE=" << dE[i] << " => M=" << Msave[Msave.size()-1] << endl;
		}
		lout << endl;
		
		Mmax = args.get<int>("Mmax",*max_element(Msave.begin(),Msave.end()));
		lout << KPS[0].info() << endl;
		
		for (int i=0; i<Msave.size(); ++i)
		{
			for (int ii0=0; ii0<i0_list.size(); ++ii0)
			{
				int i0 = i0_list[ii0];
				string momfile = make_string(wd,"moments/",outfile,"_i0=",i0,"_dE=",str(dE),".dat");
				string datfileJ = make_string(wd,outfile,"_i0=",i0,"_dE=",make_string(dE[i]),".dat");
//				string datfileL = make_string(wd,"Lorentz/",outfile,"_i0=",i0,"_dE=",make_string(dE[i]),".dat");
				
				if (SHIFT)
				{
					if (spec == "AES" or spec == "PES")
					{
						KPS[ii0].add_savepoint(Msave[i], momfile, datfileJ, Eminmax.row(1).array(), true, JACKSON); // REVERSE = true
//						KPS[ii0].add_savepoint(Msave[i], momfile, datfileL, Eminmax.row(1).array(), true, LORENTZ); // REVERSE = true
					}
					else
					{
						KPS[ii0].add_savepoint(Msave[i], momfile, datfileJ, Eminmax.row(0).array(), false, JACKSON);
//						KPS[ii0].add_savepoint(Msave[i], momfile, datfileL, Eminmax.row(0).array(), false, LORENTZ);
					}
				}
				else
				{
					ArrayXd Zero(1); Zero << 0;
					if (spec == "AES" or spec == "PES")
					{
						KPS[ii0].add_savepoint(Msave[i], momfile, datfileJ, Zero, true, JACKSON);
//						KPS[ii0].add_savepoint(Msave[i], momfile, datfileL, Zero, true, LORENTZ);
					}
					else
					{
						KPS[ii0].add_savepoint(Msave[i], momfile, datfileJ, Zero, false, JACKSON);
//						KPS[ii0].add_savepoint(Msave[i], momfile, datfileL, Zero, false, LORENTZ);
					}
				}
			}
		}
	}
	//--------------</KernelPolynomialSolver>---------------
