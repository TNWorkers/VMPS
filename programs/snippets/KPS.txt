	//--------------<KernelPolynomialSolver>---------------
	sort(dE.rbegin(), dE.rend());
	
	double spillage = 0.;
	if (spec == "PES" or spec == "IPES" or spec == "CSF")
	{
		spillage = 4.*dE[0];
	}
	else if ((spec == "AES" and N==L) or (spec == "APS" and N==0)) // full and empty band for AES/APS
	{
		spillage = 2.*dE[0];
	}
	else if (spec == "SSF" or spec == "SSFX" or spec == "SSFY" or spec == "SSFZ" or spec == "SSFP" or spec == "SSFM")
	{
		spillage = 5.*dE[0]; //0.5*(Emax-Emin);
	}
	
	OrthPolyGreen<MODEL,MODEL::StateXd,CHEBYSHEV> KPS(Emin-spillage, Emax+spillage);
	
	if (CHEB)
	{
		lout << "spillage=" << spillage << endl;
		
		for (size_t i=0; i<dE.size(); ++i)
		{
			Msave.push_back((Emax-Emin+2.*spillage)/dE[i]);
			lout << "dE=" << dE[i] << " => M=" << Msave[Msave.size()-1] << endl;
		}
		lout << endl;
		
		Mmax = args.get<int>("Mmax",*max_element(Msave.begin(),Msave.end()));
		lout << KPS.info() << endl;
		
		string momfile = make_string(wd+"moments/"+outfile,str(dE),".dat");
		for (int i=0; i<Msave.size(); ++i)
		{
			string datfileJ = make_string(wd+outfile,make_string(dE[i]),".dat");
			string datfileL = make_string(wd+"Lorentz/"+outfile,make_string(dE[i]),".dat");
			
			if (SHIFT)
			{
				if (spec == "AES" or spec == "PES")
				{
					KPS.add_savepoint(Msave[i], momfile, datfileJ, Emax, true, JACKSON); // REVERSE = true
					KPS.add_savepoint(Msave[i], momfile, datfileL, Emax, true, LORENTZ); // REVERSE = true
				}
				else
				{
					KPS.add_savepoint(Msave[i], momfile, datfileJ, Emin, false, JACKSON);
					KPS.add_savepoint(Msave[i], momfile, datfileL, Emin, false, LORENTZ);
				}
			}
			else
			{
				KPS.add_savepoint(Msave[i], momfile, datfileJ, 0, false, JACKSON);
				KPS.add_savepoint(Msave[i], momfile, datfileL, 0, false, LORENTZ);
			}
		}
	}
	//--------------</KernelPolynomialSolver>---------------
