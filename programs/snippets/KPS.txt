	//--------------<KernelPolynomialSolver>---------------
	if (CHEB)
	{
		double spillage = 0.;
		if (spec == "PES" or spec == "IPES")
		{
			spillage = 4.*dE[0];
		}
		else if (spec == "SSF" or spec == "SSFZ" or spec == "SSFP" or spec == "SSFM")
		{
			spillage = 0.5*(Emax-Emin);
		}
		OrthPolyGreen<MODEL,MODEL::StateXd,CHEBYSHEV> KPS(Emin-spillage, Emax+spillage);
		
		for (size_t i=0; i<dE.size(); ++i)
		{
			if (i>0) {assert(dE[i] < dE[i-1]);} // monotoncally decreasing resolution
			Msave.push_back((Emax-Emin+2.*spillage)/dE[i]);
			lout << "dE=" << dE[i] << " => M=" << Msave[Msave.size()-1] << endl;
		}
		lout << endl;
		
		Mmax = args.get<int>("Mmax",*max_element(Msave.begin(),Msave.end()));
		lout << KPS.info() << endl;
		
		string momfile = make_string(wd+"moments/"+outfile,str(dE),".dat");
		for (int i=0; i<Msave.size(); ++i)
		{
			string datfileJ = make_string(wd+outfile,make_string(dE[i]),".dat");
			string datfileL = make_string(wd+"Lorentz/"+outfile,make_string(dE[i]),".dat");
		
			if (spec == "AES" or spec == "PES")
			{
				KPS.add_savepoint(Msave[i], momfile, datfileJ, Emax, true, JACKSON);
				KPS.add_savepoint(Msave[i], momfile, datfileL, Emax, true, LORENTZ);
			}
			else
			{
				KPS.add_savepoint(Msave[i], momfile, datfileJ, Emin, false, JACKSON);
				KPS.add_savepoint(Msave[i], momfile, datfileL, Emin, false, LORENTZ);
			}
		}
		
		KPS.calc_ImAA(H, initA, Mmax, false);
		lout << "Chebyshev iteration done!" << endl;
	}
	//--------------</KernelPolynomialSolver>---------------
