	//--------------<ground state>---------------
	Eigenstate<MODEL::StateXd> * init = new Eigenstate<MODEL::StateXd>;
	
	Stopwatch<> Chronos;
	stringstream ginfo, rinfo;
	
//	ArrayXd Emins(Qc.size());
//	ArrayXd Emaxs(Qc.size());
	MatrixXd Eminmax(2,Qc.size());
	bool CONVERGED1 = false;
	bool CONVERGED2 = false;
	bool CONVERGED3 = false;
	
//	#pragma omp parallel sections
	{
//		#pragma omp section
		{
			Stopwatch<> nChronos;
			MODEL::Solver DMRG(VERB1);
			
			DMRG.GlobParam = H.get_DmrgGlobParam(SweepParams);
			DMRG.DynParam  = H.get_DmrgDynParam(SweepParams);
			DMRG.userSetGlobParam();
			DMRG.userSetDynParam();
			
			DMRG.edgeState(H, *init, Qi, LANCZOS::EDGE::GROUND);
			lout << endl << nChronos.info(make_string("ground state ",Qi)) << endl;
			lout << DMRG.info() << endl;
			E0 = init->energy;
			
			if (DMRG.get_errState() < DMRG.GlobParam.tol_state)
			{
				CONVERGED1 = true;
			}
		}
		if (filesystem::exists(wd+"energies/"+EminmaxFile))
		{
			Eminmax = readMatrix(wd+"energies/"+EminmaxFile);
			lout << wd+"energies/"+EminmaxFile << " loaded!" << endl;
		}
		else
		{
			for (size_t i=0; i<Qc.size(); ++i)
			{
				Stopwatch<> gChronos;
				Eigenstate<MODEL::StateXd> g;
				MODEL::Solver DMRG(VERB2);
				
				DMRG.GlobParam = H.get_DmrgGlobParam(SweepParams);
				DMRG.DynParam  = H.get_DmrgDynParam(SweepParams);
				DMRG.userSetGlobParam();
				DMRG.userSetDynParam();
				
				DMRG.LanczosParam.tol_state = 1e-3;
				DMRG.userSetLanczosParam();
				lout << termcolor::blue << endl << "Note: DMRG.LanczosParam.tol_state=" << DMRG.LanczosParam.tol_state << termcolor::reset << endl;
				
				DMRG.edgeState(H, g, Qc[i], LANCZOS::EDGE::GROUND);
				ginfo << gChronos.info(make_string("ground state ",Qc[i])) << endl;
				Eminmax(0,i) = g.energy;
				ginfo << DMRG.info() << endl;
				
				if (DMRG.get_errState() < DMRG.GlobParam.tol_state)
				{
					CONVERGED2 = true;
				}
			}
			
			for (size_t i=0; i<Qc.size(); ++i)
			{
				Stopwatch<> rChronos;
				Eigenstate<MODEL::StateXd> r;
				MODEL::Solver DMRG(VERB3);
				
				DMRG.GlobParam = H.get_DmrgGlobParam(SweepParams);
				DMRG.DynParam  = H.get_DmrgDynParam(SweepParams);
				DMRG.userSetGlobParam();
				DMRG.userSetDynParam();
				
				DMRG.LanczosParam.tol_state = 1e-3;
				DMRG.userSetLanczosParam();
				lout << termcolor::blue << endl << "Note: DMRG.LanczosParam.tol_state=" << DMRG.LanczosParam.tol_state << termcolor::reset << endl;
				
				DMRG.edgeState(H, r, Qc[i], LANCZOS::EDGE::ROOF);
				
				rinfo << rChronos.info(make_string("roof state ",Qc[i])) << endl;
				if (DMRG.get_errState() > 10.*DMRG.GlobParam.tol_state)
				{
//					Emaxs(i) = 2.*r.energy;
					lout << termcolor::red << "Warning: Bad convergence of roof state: " << DMRG.get_errState() << termcolor::reset << endl;
				}
				Eminmax(1,i) = r.energy;
				rinfo << DMRG.info() << endl;
				
				if (DMRG.get_errState() < DMRG.GlobParam.tol_state)
				{
					CONVERGED3 = true;
				}
			}
			
			// save energies
			if (!filesystem::exists(wd+"energies/"+EminmaxFile) and 
				CONVERGED1 == true and 
				CONVERGED2 == true and 
				CONVERGED3 == true)
			{
				saveMatrix(Eminmax, wd+"energies/"+EminmaxFile);
				lout << wd+"energies/"+EminmaxFile << " saved!" << endl;
			}
		}
	}
	
	cout << "Eminmax=" << endl << Eminmax << endl;
	
	Emin = Eminmax.row(0).minCoeff();
	Emax = Eminmax.row(1).maxCoeff();
	
	lout << ginfo.str() << rinfo.str() << endl;
	lout << Chronos.info("all edge states") << endl;
	lout << "Emins=" << Eminmax.row(0) << endl;
	lout << "Emaxs=" << Eminmax.row(1) << endl;
	lout << termcolor::bold << "E0=" << E0 << ", Emin=" << Emin << ", Emax=" << Emax << termcolor::reset << endl << endl;
	//--------------</ground state>---------------
