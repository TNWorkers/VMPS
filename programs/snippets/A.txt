	//--------------<transition operator>---------------
	MODEL::Operator A, Adag;
	array<MODEL::Operator,2> cs;
	array<MODEL::Operator,2> csdag;
	
	if (spec == "PES" or spec == "IPES")
	{
		cs[0]    = H.c<UP>(i0);
		cs[1]    = H.c<DN>(i0);
		csdag[0] = H.cdag<UP>(i0);
		csdag[1] = H.cdag<DN>(i0);
	}
	
	if (spec == "AES")
	{
		A = H.cc(i0);
		Adag = H.cdagcdag(i0);
		#ifdef USING_SU2
		{
			Qc.push_back(qarray<2>({D,N-2}));
		}
		#else
		{
			Qc.push_back(qarray<2>({M,N-2}));
		}
		#endif
	}
	else if (spec == "APS")
	{
		A = H.cdagcdag(i0);
		Adag = H.cc(i0);
		
		#ifdef USING_SU2
		{
			Qc.push_back(qarray<2>({D,N+2}));
		}
		#else
		{
			Qc.push_back(qarray<2>({M,N+2}));
		}
		#endif
	}
	else if (spec == "PES")
	{
		#ifdef USING_SU2
		{
			A = H.c(i0, 0, 1.);
			Adag = H.cdag(i0, 0, sqrt(2.));
			Qc.push_back(qarray<2>({D+1,N-1}));
			if (D>1) {Qc.push_back(qarray<2>({D-1,N-1}));}
		}
		#else
		{
			A    = cs[sigma];
			Adag = csdag[sigma];
			
			if (sigma==UP)
			{
				Qc.push_back(qarray<2>({M-1,N-1}));
			}
			else
			{
				Qc.push_back(qarray<2>({M+1,N-1}));
			}
		}
		#endif
	}
	else if (spec == "IPES")
	{
		#ifdef USING_SU2
		{
			A = H.cdag(i0, 0, 1.);
			Adag = H.c(i0, 0, sqrt(2.));
			Qc.push_back(qarray<2>({D+1,N+1}));
			if (D>1) {Qc.push_back(qarray<2>({D-1,N+1}));}
		}
		#else
		{
			A    = csdag[sigma];
			Adag = cs[sigma];
			
			if (sigma==UP)
			{
				Qc.push_back(qarray<2>({M+1,N+1}));
			}
			else
			{
				Qc.push_back(qarray<2>({M-1,N+1}));
			}
		}
		#endif
	}
	else if (spec == "CSF")
	{
		A = H.n(i0);
		Adag = A;
		Qc.push_back(Qi);
	}
	else if (spec == "SSF" or spec == "SSFZ" or spec == "SSFP" or spec == "SSFM")
	{
		#ifdef USING_SU2
		{
			A = H.S(i0);
			Adag = H.Sdag(i0, 0, sqrt(3.));
			Qc.push_back({D+2,N});
			if (D>1) {Qc.push_back({D,N});}
			if (D>2) {Qc.push_back({D-2,N});}
		}
		#else
		{
			if (spec == "SSFM")
			{
				A = H.Scomp(SM, i0, 0, 1./sqrt(2.));
				Adag = H.Scomp(SP, i0, 0, 1./sqrt(2.));
				Qc.push_back(Qi+A.Qtarget());
			}
			else if (spec == "SSFP")
			{
				A = H.Scomp(SP, i0, 0, 1./sqrt(2.));
				Adag = H.Scomp(SM, i0, 0, 1./sqrt(2.));
				Qc.push_back(Qi+A.Qtarget());
			}
			else
			{
				A = H.Sz(i0);
				Adag = H.Sz(i0);
				Qc.push_back(Qi);
			}
		}
		#endif
	}

	//	A.precalc_TwoSiteData();
	//	Adag.precalc_TwoSiteData();
	lout << A.info() << endl;
	lout << Adag.info() << endl;
	lout << "Qi=" << Qi << endl;
	for (size_t i=0; i<Qc.size(); ++i)
	{
		lout << "i=" << i << ", Qc=" << Qc[i] << endl;
	}
	//--------------</transition operator>---------------
